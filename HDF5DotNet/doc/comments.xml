<?xml version="1.0"?>
<doc>
    <assembly>
        "HDF5DotNet"
    </assembly>
    <members>
        <member name="M:HDF5DotNet.H5D.getType(HDF5DotNet.H5DataSetId)">
            <summary>
Returns an identifier for a copy of the datatype for a
dataset.
</summary>
            <param name="dataSetId">
In: Identifier of dataset to query.
</param>
            <returns>
Returns a datatype identifier if successful.
</returns>
            <exception cref="T:HDF5DotNet.H5DgetTypeException">
throws H5DgetTypeException on failure.
</exception>
        </member>
        <member name="M:HDF5DotNet.H5D.getSpace(HDF5DotNet.H5DataSetId)">
            <summary>
Returns an identifier for a copy of the dataspace for a
dataset.
</summary>
            <param name="dataSetId">
IN: Identifier of the dataset to query.
</param>
            <returns>
Returns a dataspace identifier if successful.
</returns>
            <remarks>
H5Dget_space returns an identifier for a copy of the dataspace
for a dataset. The dataspace identifier should be released with
the H5S.close function.
</remarks>
            <exception cref="T:HDF5DotNet.H5DgetSpaceException">
throws H5DgetSpaceException on failure.
</exception>
        </member>
        <member name="M:HDF5DotNet.H5D.open(HDF5DotNet.H5LocId,System.String)">
            <summary>
Opens an existing dataset.
</summary>
            <param name="groupOrFileId">
IN: Identifier of the file or
group within which the dataset to be accessed will be found. 
</param>
            <param name="dataSetName">
IN: The name of the dataset to access.
</param>
            <exception cref="T:HDF5DotNet.H5DopenException">
throws H5DopenException on failure.
</exception>
            <remarks>
H5Dopen opens an existing dataset for access in the file or 
group specified in groupOrFileId. name is a dataset name and 
is used to identify the dataset in the file.
</remarks>
        </member>
        <member name="M:HDF5DotNet.H5D.close(HDF5DotNet.H5DataSetId)">
            <summary>
Close a data set.
</summary>
            <param name="id">
IN: Id of data set to close.
</param>
            <exception cref="T:HDF5DotNet.H5DcloseException"> 
throws H5DcloseException if close fails
</exception>
        </member>
        <member name="M:HDF5DotNet.H5D.create(HDF5DotNet.H5LocId,System.String,HDF5DotNet.H5DataTypeId,HDF5DotNet.H5DataSpaceId)">
            <summary>
Create a data set using a H5DataTypeId.
</summary>
            <param name="groupOrFileId"> IN: Identifier of the file
or group within which to create the dataset.
</param>
            <param name="datasetName"> IN: The name of the dataset to create.
</param>
            <param name="dataTypeId"> IN: datatypeId to use when
creating the dataset.
</param>
            <param name="dataspaceId"> IN: Identifier of the 
dataspace to use when creating the dataset.
</param>
            <exception cref="T:HDF5DotNet.H5DcreateException"> 
throws H5DcreateException if the data set creation 
fails 
</exception>
        </member>
        <member name="M:HDF5DotNet.H5D.create(HDF5DotNet.H5LocId,System.String,HDF5DotNet.H5T.H5Type,HDF5DotNet.H5DataSpaceId)">
            <summary>
Create a data set at the specified location using a standard
data type.
</summary>
            <param name="groupOrFileId"> IN: Identifier of the file
or group within which to create the dataset.
</param>
            <param name="datasetName"> IN: The name of the dataset to create.
</param>
            <param name="dataType"> IN: standard datatype to use when
creating the dataset.
</param>
            <param name="dataspaceId"> IN: Identifier of the 
dataspace to use when creating the dataset.
</param>
            <exception cref="T:HDF5DotNet.H5DcreateException"> 
throws H5DcreateException if the data set creation 
fails 
</exception>
        </member>
        <member name="T:HDF5DotNet.H5D">
            <summary>
The H5D contains static member function for each of the supported
H5D calls of the HDF5 library.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5F.close(HDF5DotNet.H5FileId)">
            <summary> close an open file.  It is necessary to close open 
files to prevent resource leaks. 
</summary>
        </member>
        <member name="M:HDF5DotNet.H5F.open(System.String,HDF5DotNet.H5F.OpenMode,HDF5DotNet.H5PropertyListId)">
            <summary> open an existing HDF5 file. </summary>
            <param name="filename">
IN: Name of the file to access.
</param>
            <param name="mode">
IN: File access mode (e.g., OpenMode.ACC_RDONLY)
</param>
            <param name="propertyListId">
IN: Identifier for the file access properties list. If
parallel file access is desired, this is a collective call
according to the communicator stored in the access_id.
</param>
            <summary> open an existing HDF5 file. </summary>
        </member>
        <member name="M:HDF5DotNet.H5F.open(System.String,HDF5DotNet.H5F.OpenMode)">
            <summary> open an existing HDF5 file. </summary>
            <param name="filename">
IN: Name of the file to access.
</param>
            <param name="mode">
IN: File access mode (e.g., OpenMode.ACC_RDONLY)
</param>
        </member>
        <member name="M:HDF5DotNet.H5F.create(System.String,HDF5DotNet.H5F.CreateMode,HDF5DotNet.H5PropertyListId,HDF5DotNet.H5PropertyListId)">
            <summary> Create a HDF5 file </summary>
            <param name="filename"> filename for new HDF5 file</param>
            <param name="mode"> H5F.CreateMode enumeration type that specifies
such modes as read-only (H5F.CreateMode.ACC_RDONLY) </param>
            <param name="creationPropertyList">
IN: File creation property list identifier, used when
modifying default file meta-data.
</param>
            <param name="accessPropertyList">
IN: File access property list identifier. If parallel file
access is desired, this is a collective call according to the
communicator stored in the access_id.
</param>
            <exception> throws H5CreateException when create fails
</exception>
            <returns> a vaild H5FileId for the created file </returns>
            <remarks>
us the opportunity for future source-compatible library upgrades.
</remarks>
        </member>
        <member name="M:HDF5DotNet.H5F.create(System.String,HDF5DotNet.H5F.CreateMode,HDF5DotNet.H5PropertyListId)">
            <summary> Create a HDF5 file </summary>
            <param name="filename"> filename for new HDF5 file</param>
            <param name="mode"> H5F.CreateMode enumeration type that specifies
such modes as read-only (H5F.CreateMode.ACC_RDONLY) </param>
            <exception> throws H5CreateException when create fails
</exception>
            <returns> a vaild H5FileId for the created file </returns>
            <remarks>
Keeping the H5Id class implemented as an abstract data type 
provides
us the opportunity for future source-compatible library upgrades.
</remarks>
        </member>
        <member name="M:HDF5DotNet.H5F.create(System.String,HDF5DotNet.H5F.CreateMode)">
            <summary> Create a HDF5 file </summary>
            <param name="filename"> filename for new HDF5 file</param>
            <param name="mode"> H5F.CreateMode enumeration type that specifies
such modes as read-only (H5F.CreateMode.ACC_RDONLY) </param>
            <exception> throws H5CreateException when create fails
</exception>
            <returns> a vaild H5FileId for the created file </returns>
            <remarks>
Keeping the H5Id class implemented as an abstract data type 
provides
us the opportunity for future source-compatible library upgrades.
</remarks>
            <example>
                <para> [C#] </para>
                <code>
try
{
   // Create an HDF5 file.
   H5FileId fileId = H5F.create("myCSharp.h5", 
                                 H5F.CreateMode.ACC_TRUNC);
   H5F.close(openId);
}
catch (HDFException e)
{
   Console.WriteLine(e.Message);
}
</code>
                <para> [Visual Basic .NET] </para>
Imports HDF5DotNet
<code>
Module Module1
 Sub Main()
     Dim FileId As H5FileId
        Try
            FileId = H5F.create("HDF5_fromVB", _
                                 H5F.CreateMode.ACC_TRUNC)
            H5F.close(FileId)
        Catch ex As HDFException
            Console.WriteLine(ex.Message())
        End Try
        Console.WriteLine("Processing complete!")
        Console.ReadLine()
    End Sub
End Module
</code><para> [C++/Cli] </para><code>
try
{
  // Create an HDF5 file.
  H5FileId^ fileId = H5F::create("myCpp.h5", 
	                         H5F::CreateMode::ACC_TRUNC);
  // Close the file
  H5F::close(fileId);
}
catch (HDFException^ e)
{
   Console::WriteLine(e-&gt;Message);
}
</code></example>
        </member>
        <member name="F:HDF5DotNet.H5F.OpenMode.ACC_DEBUG">
            <summary> debug mode. </summary>
        </member>
        <member name="F:HDF5DotNet.H5F.OpenMode.ACC_RDWR">
            <summary> Read/Write mode. </summary>
        </member>
        <member name="F:HDF5DotNet.H5F.OpenMode.ACC_RDONLY">
            <summary> Read only mode. </summary>
        </member>
        <member name="T:HDF5DotNet.H5F.OpenMode">
            <summary>
H5F.OpenMode provides the HDF5 file access modes available
when opening a file.
</summary>
        </member>
        <member name="F:HDF5DotNet.H5F.CreateMode.ACC_CREAT">
            <summary> Create the file. </summary>
        </member>
        <member name="F:HDF5DotNet.H5F.CreateMode.ACC_DEBUG">
            <summary> debug mode. </summary>
        </member>
        <member name="F:HDF5DotNet.H5F.CreateMode.ACC_EXCL">
            <summary> Read only mode. </summary>
        </member>
        <member name="F:HDF5DotNet.H5F.CreateMode.ACC_TRUNC">
            <summary> Truncate (delete) data in existing file. </summary>
        </member>
        <member name="F:HDF5DotNet.H5F.CreateMode.ACC_RDWR">
            <summary> Read/Write mode. </summary>
        </member>
        <member name="F:HDF5DotNet.H5F.CreateMode.ACC_RDONLY">
            <summary> Read only mode. </summary>
        </member>
        <member name="T:HDF5DotNet.H5F.CreateMode">
            <summary>
H5F.CreateMode provides the HDF5 file access modes available
when creating a file.
</summary>
        </member>
        <member name="T:HDF5DotNet.H5F">
            <summary>
The H5F contains static member function for each of the supported
H5F calls of the HDF5 library.  H5F indicates that this group of
function operates on files.
</summary>
        </member>
        <member name="M:HDF5DotNet.ObjectInfo.#ctor(H5G_stat_t@)">
Copy the information from a H5G_stat_t to an ObjectInfo class.
</member>
        <member name="M:HDF5DotNet.H5G.getObjectInfo(HDF5DotNet.H5LocId,System.String,System.Boolean)">
            <summary>
Returns information about an object.
</summary>
            <param name="groupOrFileId"> 
IN: File or group Id.
</param>
            <param name="name"> 
IN: Name of the object for which status is being sought.
</param>
            <param name="followLink"> 
IN: If the object is a symbolic link and followLink is false,
then the information returned is that for the link itself;
otherwise the link is followed and information is returned
about the object to which the link points.
</param>
            <returns>
The filenumber and objectnumber properties contain two values
each.  Together, these four values uniquely
identify an object among those HDF5 files which are open: if
all four values are the same between two objects, then the two
objects are the same (provided both files are still open).
<ul><li>
Note that if a file is closed and re-opened, the value in
fileno will change.
</li><li>
If a VFL driver either does not or cannot detect that two
H5Fopen calls referencing the same file actually open the same
file, each will get a different fileno.
</li></ul><p>
The nHardLinks property is the number of hard links to the
object or zero when information is being returned about a
symbolic link (symbolic links do not have hard links but all
other objects always have at least one).
</p><p>
The basicType property contains the type of the object, one of
H5GType.GROUP, HType.DATASET, HType.LINK, or HType.TYPE.
</p><p>
The modificationTime property contains the modification time.
</p><p>
If information is being returned about a symbolic link then
the linkLength property will be the length of the link value 
(the name of the
pointed-to object with the null terminator); otherwise it
will be zero.
</p><p>
The headerSize property is the total size of all the object 
header information in the file (for all chunks).
</p><p>
The unusedHeaderSpace property is the size of unused space in
the object header.
</p><p>
The nHeaderMessages property is the number of object header
messages.
</p><p>
The nHeaderChunks property is the number of chunks the 
object header is broken up into. 
</p></returns>
        </member>
        <member name="M:HDF5DotNet.H5G.iterate(HDF5DotNet.H5LocId,System.String,HDF5DotNet.H5GIterateDelegate,System.Object,System.Int32)">
            <summary>
Iterates an operation over the entries of a group.
</summary>
            <param name="loc"> 
IN: File or group identifier.
</param>
            <param name="name"> 
IN: Group over which the iteration is performed.
</param>
            <param name="func"> 
IN: Operation to be performed on an object at each step of the
iteration.
</param>
            <param name="startIndex"> 
  IN: Location at which to begin the iteration
</param>
            <returns>
Returns the return value of the last operator if it was
non-zero, or zero if all group members were processed. 
</returns>
            <remarks />
        </member>
        <member name="M:HDF5DotNet.H5G.getObjectNameByIndex(HDF5DotNet.H5GroupId,System.Int32)">
            <summary>
Gets the name of the object with the specified object index.
</summary>
            <param name="groupId"> IN: Group in which object is a
member.
</param>
            <exception cref="T:HDF5DotNet.H5GgetObjectNameByIndexException"> 
throws H5GgetObjectNameByIndexException if request fails 
</exception>
            <remarks />
        </member>
        <member name="M:HDF5DotNet.H5G.getNumObjects(HDF5DotNet.H5GroupId)">
            <summary>
Gets the number of objects in the specified group.
</summary>
            <param name="groupId"> IN: Group identifier
</param>
            <exception cref="T:HDF5DotNet.H5GgetNumObjectsException"> 
throws H5GgetNumObjectsException if request fails 
</exception>
            <remarks />
        </member>
        <member name="M:HDF5DotNet.H5G.close(HDF5DotNet.H5GroupId)">
            <summary>
Closes the specified group.
</summary>
            <param name="groupId"> IN: Group identifier to release. 
</param>
            <remarks> H5Gclose releases resources used by a group which
was opened by H5Gcreate or H5Gopen. After closing a group, the
group_id cannot be used again. 
</remarks>
            <exception>
throws H5GcloseException if the close fails.
</exception>
        </member>
        <member name="M:HDF5DotNet.H5G.open(HDF5DotNet.H5LocId,System.String)">
            <summary>
 Opens an existing group for modification and returns a group
identifier for that group.
</summary>
            <param name="groupOrFileId">
IN: File or group identifier
within which group is to be open. 
</param>
            <param name="groupName"> 
IN: Name of group to open.
</param>
            <remarks>
H5G.open opens an existing group with the specified name
at the specified location, groupOrFileId. The location is 
identified 
by a file or group identifier.  H5G.open returns a group
identifier for the group that was opened. This group
identifier should be released by calling H5G.close when it is
no longer needed. 
</remarks>
            <exception>
H5G.open throws H5GopenException on failure.
</exception>
        </member>
        <member name="M:HDF5DotNet.H5G.create(HDF5DotNet.H5LocId,System.String,System.UInt32)">
            <summary>
Create a HDF5 group.  Creates a new empty group and gives 
 it a name.
</summary>
            <param name="groupOrFileId"> IN: provides a group or file id. 
</param>
            <param name="groupName"> IN: Absolute or relative name of the
new group.
</param>
            <param name="sizeHint">IN: Optional parameter indicating the number
of bytes to reserve for the names that will appear in the
group. A conservative estimate could result in multiple
system-level I/O requests to read the group name heap; a
liberal estimate could result in a single large I/O request
even when the group has just a few names. HDF5 stores each
name with a null terminator. 
</param>
            <returns> Returns a valid group identifier 
</returns>
            <remarks>
                <para>
H5G.create creates a new group with the specified name at the 
specified location, loc_id. The location is identified by a 
file or group identifier. The name must not already be 
taken by some other object and all parent groups must already 
exist.
</para>
                <para>
size_hint is a hint for the number of bytes to reserve to 
store the names which will be eventually added to the new
group. 
Passing a value of zero for size_hint is usually adequate
since the library is able to dynamically resize the name heap,
but a correct hint may result in better performance. If a 
non-positive value is supplied for size_hint, then a default  
size is chosen.
</para>
                <para> 
The return value is a group identifier for the open group. 
This group identifier should be closed by calling H5G.close
when it is no longer needed.  
</para>
            </remarks>
            <exception>
throws H5GcreateException if the creation fails.
</exception>
        </member>
        <member name="T:HDF5DotNet.H5G">
            <summary>
The H5G contains static member function for each of the supported
H5G calls of the HDF5 library.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5PropertyListId.#ctor">
            <summary>
The default constructor is disallowed.  Only HDF5 library
routines are capable of creating an instance of
H5PropertyListId and they must supply an id when doing so.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5PropertyListId.#ctor(System.Int32)">
            <remarks>
This is the only constructor used to create an
H5PropertyListId.
It can only be invoked by HDF5DotNet library functions.
</remarks>
            <param name="id"> is an HDF5 library-generated identification
number that serves as a unique indentifier. </param>
        </member>
        <member name="T:HDF5DotNet.H5PropertyListId">
            <summary>
H5PropertyListId uniquely identifies a property list.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5DataTypeId.#ctor">
            <summary>
The default constructor is disallowed.  Only HDF5 library
routines are capable of creating an instance of H5DataTypeId
and they must supply an id when doing so.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5DataTypeId.#ctor(System.Int32)">
            <remarks>
This is the only constructor used to create an H5DataTypeId.
It can only be invoked by HDF5DotNet library functions.
</remarks>
            <param name="id"> is an HDF5 library-generated identification
number that serves as a unique indentifier. </param>
        </member>
        <member name="M:HDF5DotNet.H5DataSetId.#ctor">
            <summary>
The default constructor is disallowed.  Only HDF5 library
routines are capable of creating an instance of H5DataSetId
and they must supply an id when doing so.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5DataSetId.#ctor(System.Int32)">
            <remarks>
This is the only constructor used to create an H5DataSetId.
It can only be invoked by HDF5DotNet library functions.
</remarks>
            <param name="id"> is an HDF5 library-generated identification
number that serves as a unique indentifier. </param>
        </member>
        <member name="T:HDF5DotNet.H5DataSetId">
            <summary> H5DataSetId uniquely identifies a data set. </summary>
        </member>
        <member name="M:HDF5DotNet.H5DataSpaceId.#ctor">
            <summary>
The default constructor is disallowed.  Only HDF5 library
routines are capable of creating an instance of H5DataSpaceId
and they must supply an id when doing so.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5DataSpaceId.#ctor(System.Int32)">
            <remarks>
This is the only constructor used to create an H5DataSpaceId.
It can only be invoked by HDF5DotNet library functions.
</remarks>
            <param name="id"> is an HDF5 library-generated identification
number that serves as a unique indentifier. </param>
        </member>
        <member name="T:HDF5DotNet.H5DataSpaceId">
            <summary> H5DataSpaceId uniquely identifies a data space. </summary>
        </member>
        <member name="M:HDF5DotNet.H5GroupId.#ctor">
            <summary>
The default constructor is disallowed.  Only HDF5 library
routines are capable of creating an instance of H5GroupId and they
must supply an id when doing so.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5GroupId.#ctor(System.Int32)">
            <remarks>
This is the only constructor used to create an H5GroupId.  It can
only be invoked by HDF5DotNet library functions.
</remarks>
            <param name="id"> is an HDF5 library-generated identification
number that serves as a unique indentifier. </param>
        </member>
        <member name="T:HDF5DotNet.H5GroupId">
            <summary> H5GroupId uniquely identifies a group. </summary>
        </member>
        <member name="M:HDF5DotNet.H5FileId.#ctor">
            <summary>
The default constructor is disallowed.  Only HDF5 library
routines are capable of creating an instance of H5FileId and they
must supply an id when doing so.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5FileId.#ctor(System.Int32)">
            <remarks>
This is the only constructor used to create an H5FileId.  It can
only be invoked by HDF5DotNet library functions.
</remarks>
            <param name="id"> is an HDF5 library-generated identification
number that serves as a unique indentifier. </param>
        </member>
        <member name="T:HDF5DotNet.H5FileId">
            <example>
                <para> [C#] </para>
                <code>
try
{
   // Create an HDF5 file.
   H5FileId fileId = H5F.create("myCSharp.h5", 
                                 H5F.CreateMode.ACC_TRUNC);
   // Create a HDF5 group.  
   H5GroupId groupId = H5G.create(fileId, "/cSharpGroup", 0);
   H5G.close(groupId);
   H5F.close(openId);
}
catch (HDFException e)
{
   Console.WriteLine(e.Message);
}
</code>
                <para> [Visual Basic .NET] </para>
Imports HDF5DotNet
<code>
Module Module1
 Sub Main()
     Dim FileId As H5FileId
     Dim GroupId As H5GroupId

        Try
            FileId = H5F.create("HDF5_fromVB", H5F.CreateMode.ACC_TRUNC)
            GroupId = H5G.create(FileId, "/vbGroup", _
                                H5F.CreateMode.ACC_TRUNC)
            
            H5G.close(GroupId)
            H5F.close(FileId)
        Catch ex As HDFException
            Console.WriteLine(ex.Message())

        End Try
        Console.WriteLine("Processing complete!")
        Console.ReadLine()
    End Sub
End Module
</code><para> [C++/Cli] </para>
try
{
  // Create an HDF5 file.
  H5FileId^ fileId = H5F::create("myCpp.h5", 
	                         H5F::CreateMode::ACC_TRUNC);
  // Create a HDF5 group.  
  H5GroupId^ groupId = H5G::create(fileId, "/cppGroup", 0);

  // Close the group.
  H5G::close(groupId);

  // Close the file
  H5F::close(fileId);
}
catch (HDFException^ e)
{
   Console::WriteLine(e-&gt;Message);
}
<code /></example>
        </member>
        <member name="M:HDF5DotNet.H5LocId.#ctor">
            <summary>
The default constructor is disallowed.  Only HDF5 library
routines are capable of creating an instance of H5FileId and they
must supply an id when doing so.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5LocId.#ctor(System.Int32)">
            <remarks>
This is the only constructor used to create an H5LocId.  It can
only be invoked by HDF5DotNet library functions.
</remarks>
            <param name="id"> is an HDF5 library-generated identification
number that serves as a unique indentifier. </param>
        </member>
        <member name="T:HDF5DotNet.H5LocId">
            <summary>
H5LocId is the base class for H5FileId and H5GroupId
</summary>
        </member>
        <member name="F:HDF5DotNet.H5Id.id_">
            <summary />
        </member>
        <member name="M:HDF5DotNet.H5Id.#ctor">
            <summary>
The default constructor is disallowed.  Only HDF5 library
routines are capable of creating an instance of H5Id and they
must supply an id when doing so.
</summary>
        </member>
        <member name="P:HDF5DotNet.H5Id.Id">
            <summary>
Allow read-only access to the internal HDF5 id to HDF5 library
members. (members of this assembly).
</summary>
        </member>
        <member name="M:HDF5DotNet.H5Id.#ctor(System.Int32)">
            <remarks>
This is the only constructor used to create an H5Id.  It can
only be invoked by HDF5DotNet library functions.
</remarks>
            <param name="id"> is an HDF5 library-generated identification
number that serves as a unique indentifier. </param>
        </member>
        <member name="T:HDF5DotNet.H5Id">
            <summary>
 H5Id identifies an H5 object.
</summary>
            <remarks> 
Only HDF5 library routines may
create an H5Id.  Application programmers use instances of H5Id that
are returned from HDF5 library calls for subsequent calls.
Keeping the H5Id class implemented as an abstract data type provides
the opportunity for future source-compatible library upgrades.
</remarks>
            <summary>
base class for all classes that provide hid_t to the unmanaged HDF5 API.
</summary>
            <remarks>
  H5Id simply stores the hid_t id used by the unmanaged HDF5 API.
Subclasses of this base class provide type saftey.
</remarks>
        </member>
        <member name="M:HDF5DotNet.HDFException.#ctor">
            <summary />
        </member>
        <member name="M:HDF5DotNet.H5S.selectNone(HDF5DotNet.H5DataSpaceId)">
            <summary>
Verifies that the selection is within the extent of the
dataspace.
</summary>
            <param name="spaceId">
Identifier of the dataspace being queried.
</param>
            <returns>
true if the selection is contained within the extent, false if
it is not.  
</returns>
            <remarks />
            <exception cref="T:HDF5DotNet.H5SselectNoneException">
throws H5SselectNoneException on failure such as the selection
or extent not being defined.
</exception>
        </member>
        <member name="M:HDF5DotNet.H5S.getSimpleExtentDims(HDF5DotNet.H5DataSpaceId)">
            <summary>
H5S.getSimpleExtentDims returns the size of each 
dimension of a dataspace.
</summary>
            <param name="spaceId">
Identifier of the dataspace
</param>
            <returns>
An array containing the size of each dimension.
</returns>
            <remarks />
            <exception cref="T:HDF5DotNet.H5SgetSimpleExtentDimsException">
throws H5SgetSimpleExtentDimsException on failure.
</exception>
        </member>
        <member name="M:HDF5DotNet.H5S.getSimpleExtentMaxDims(HDF5DotNet.H5DataSpaceId)">
            <summary>
H5S.getSimpleExtentMaxDims returns the maximum size of each 
dimension of a dataspace.
</summary>
            <param name="spaceId">
Identifier of the dataspace
</param>
            <returns>
An array containing the maximum size of each dimension.
</returns>
            <remarks />
            <exception cref="T:HDF5DotNet.H5SgetSimpleExtentMaxDimsException">
throws H5SgetSimpleExtentMaxDimsException on failure.
</exception>
        </member>
        <member name="M:HDF5DotNet.H5S.getSimpleExtentNDims(HDF5DotNet.H5DataSpaceId)">
            <summary>
Determines the dimensionality of a dataspace.
</summary>
            <param name="spaceId">
Identifier of the dataspace
</param>
            <returns>
Returns the number of dimensions in the dataspace if
successful.
</returns>
            <remarks>
H5S.getSimpleExtentNDims determines the dimensionality (or
rank) of a dataspace.
</remarks>
            <exception cref="T:HDF5DotNet.H5SgetSimpleExtentNDimsException">
throws H5SgetSimpleExtentNDimsException on failure.
</exception>
        </member>
        <member name="M:HDF5DotNet.H5S.selectHyperslab(HDF5DotNet.H5DataSpaceId,HDF5DotNet.H5S.SelectOperator,System.UInt64[],System.UInt64[],System.UInt64[])">
            <summary>
Selects a hyperslab region to add to the current selected
region.
</summary>
            <param name="spaceId">
IN: Identifier of dataspace selection to modify
</param>
            <param name="selectOperator">
IN: Operation to perform on current selection.
</param>
            <param name="start">
IN: Offset of start of hyperslab
</param>
            <param name="count">
IN: Number of blocks included in hyperslab.
</param>
            <param name="block"> 
IN: Size of block in hyperslab.
</param>
            <remarks>
                <p>
H5S.selectStridedHyperslab selects a hyperslab region to add to
the current selected region for the dataspace specified by 
space_id.
</p>
                <p>
The start, count, and block arrays must be the same
size as the rank of the dataspace.
</p>
                <p>
The selection operator op determines how the new selection is
to be combined with the already existing selection for the 
dataspace. The following operators are supported:
</p>
                <ul>
                    <li>
H5S_SELECT_SET - Replaces the existing selection with the 
parameters from this call. Overlapping blocks are not
supported with this operator.
</li>
                    <li>
H5S_SELECT_OR - Adds the new selection to the existing 
selection. (Binary OR)
</li>
                    <li>
H5S_SELECT_AND - Retains only the overlapping portions of the 
new selection and the existing selection.    (Binary AND)
</li>
                    <li>
H5S_SELECT_XOR - Retains only the elements that are members of
the new selection or the existing selection, excluding
elements that are members of both selections. (Binary 
exclusive-OR, XOR)
</li>
                    <li>
H5S_SELECT_NOTB - Retains only elements of the existing 
selection that are not in the new selection.
</li>
                    <li>
H5S_SELECT_NOTA - Retains only elements of the new selection
that are not in the existing selection.
</li>
                </ul>
                <p>
The start array determines the starting coordinates of the 
hyperslab to select.
</p>
                <p>
The results of calling selectHyperslab are identical to
calling selectStridedHyperslab, with stride values equal to 1.
</p>
                <p>
The count array determines how many blocks to select from the 
dataspace, in each dimension.
</p>
                <p>
    The block array determines the size of the element block 
selected from the dataspace. If the block parameter is
omitted, the block size defaults to a single element in each 
dimension (as if the block array were set to all 1's).
</p>
                <p>
Regions selected with this function call default to 
C order iteration when I/O is performed. 
</p>
            </remarks>
        </member>
        <member name="M:HDF5DotNet.H5S.selectStridedHyperslab(HDF5DotNet.H5DataSpaceId,HDF5DotNet.H5S.SelectOperator,System.UInt64[],System.UInt64[],System.UInt64[],System.UInt64[])">
            <summary>
Selects a hyperslab region to add to the current selected
region.
</summary>
            <param name="spaceId">
IN: Identifier of dataspace selection to modify
</param>
            <param name="selectOperator">
IN: Operation to perform on current selection.
</param>
            <param name="start">
IN: Offset of start of hyperslab
</param>
            <param name="stride">
IN: Hyperslab stride.
</param>
            <param name="count">
IN: Number of blocks included in hyperslab.
</param>
            <param name="block"> 
IN: Size of block in hyperslab.
</param>
            <remarks>
                <p>
H5S.selectStridedHyperslab selects a hyperslab region to add to
the current selected region for the dataspace specified by 
space_id.
</p>
                <p>
The start, stride, count, and block arrays must be the same
size as the rank of the dataspace.
</p>
                <p>
The selection operator op determines how the new selection is
to be combined with the already existing selection for the 
dataspace. The following operators are supported:
</p>
                <ul>
                    <li>
H5S_SELECT_SET - Replaces the existing selection with the 
parameters from this call. Overlapping blocks are not
supported with this operator.
</li>
                    <li>
H5S_SELECT_OR - Adds the new selection to the existing 
selection. (Binary OR)
</li>
                    <li>
H5S_SELECT_AND - Retains only the overlapping portions of the 
new selection and the existing selection.    (Binary AND)
</li>
                    <li>
H5S_SELECT_XOR - Retains only the elements that are members of
the new selection or the existing selection, excluding
elements that are members of both selections. (Binary 
exclusive-OR, XOR)
</li>
                    <li>
H5S_SELECT_NOTB - Retains only elements of the existing 
selection that are not in the new selection.
</li>
                    <li>
H5S_SELECT_NOTA - Retains only elements of the new selection
that are not in the existing selection.
</li>
                </ul>
                <p>
The start array determines the starting coordinates of the 
hyperslab to select.
</p>
                <p>
The stride array chooses array locations from the dataspace
with each value in the stride array determining how many
elements to move in each dimension. Setting a value in the 
stride array to 1 moves to each element in that dimension of
the dataspace; setting a value of 2 in alocation in the stride
array moves to every other element in that dimension of the 
dataspace. In other words, the stride determines the number of
elements to move from the start location in each dimension. 
Stride values of 0 are not allowed. 
</p>
                <p>
The count array determines how many blocks to select from the 
dataspace, in each dimension.
</p>
                <p>
The block array determines the size of the element block 
selected from the dataspace. If the block parameter is
omitted, the block size defaults to a single element in each 
dimension (as if the block array were set to all 1's).
</p>
                <p>
For example, in a 2-dimensional dataspace, setting start 
to [1,1], stride to [4,4], count to [3,7], and block to [2,2] 
selects 21 2x2 blocks of array elements starting with 
location (1,1) and selecting blocks at locations (1,1), 
(5,1), (9,1), (1,5), (5,5), etc.
</p>
                <p>
Regions selected with this function call default to 
C order iteration when I/O is performed. 
</p>
            </remarks>
        </member>
        <member name="M:HDF5DotNet.H5S.create(HDF5DotNet.H5S.H5SClass)">
            <summary>
Creates a new dataspace of a specified type.
</summary>
            <param name="createClass"> 
The type of dataspace to be created.
</param>
            <returns>
Returns a dataspace identifier if successful.
</returns>
            <exception cref="T:HDF5DotNet.H5ScreateException">
throws H5ScreateException on failure.
</exception>
            <remarks>
H5Screate creates a new dataspace of a particular type. The
types currently supported are H5SClass.SCALAR and H5SClass.SIMPLE;
others are planned to be added later.
</remarks>
        </member>
        <member name="F:HDF5DotNet.H5S.SelectOperator.NOTA">
            <summary>
Retains only elements of the new selection that are not in
the existing selection.
</summary>
        </member>
        <member name="F:HDF5DotNet.H5S.SelectOperator.NOTB">
            <summary>
Retains only elements of the existing selection that are not
in the new selection.
</summary>
        </member>
        <member name="F:HDF5DotNet.H5S.SelectOperator.XOR">
            <summary>
Retains only the elements that are members of the new 
selection or the existing selection, excluding elements that
are members of both selections. (Binary exclusive-OR, XOR)
</summary>
        </member>
        <member name="F:HDF5DotNet.H5S.SelectOperator.AND">
            <summary>
Retains only the overlapping portions of the new selection
and the existing selection. (Binary AND)
</summary>
        </member>
        <member name="F:HDF5DotNet.H5S.SelectOperator.OR">
            <summary>
Adds the new selection to the existing selection.    
(Binary OR)
</summary>
        </member>
        <member name="F:HDF5DotNet.H5S.SelectOperator.SET">
            <summary> 
Replaces the existing selection with the 
parameters from this call. Overlapping blocks are not 
supported with this operator. 
</summary>
        </member>
        <member name="M:HDF5DotNet.H5S.close(HDF5DotNet.H5DataSpaceId)">
            <summary>
Releases and terminates access to a dataspace.
</summary>
            <param name="id"> Identifier of dataspace to release.
</param>
        </member>
        <member name="M:HDF5DotNet.H5S.create_simple(System.Int32,System.UInt64[])">
            <summary>
Creates a new simple dataspace and opens it for access.
</summary>
            <param name="rank"> Number of dimensions of dataspace.
</param>
            <param name="dims">
An array of the size of each dimension.
</param>
            <remarks>
                <p>
H5Screate_simple creates a new simple dataspace and opens it 
 for access.
</p>
                <p>
rank is the number of dimensions used in the dataspace.
</p>
                <p>
The upper limit is the same as dims.
</p>
                <p>
The dataspace identifier returned from this function must be
released with H5Sclose or resource leaks will occur. 
</p>
            </remarks>
        </member>
        <member name="M:HDF5DotNet.H5S.create_simple(System.Int32,System.UInt64[],System.UInt64[])">
            <summary>
Creates a new simple dataspace and opens it for access.
</summary>
            <param name="rank"> Number of dimensions of dataspace.
</param>
            <param name="dims">
An array of the size of each dimension.
</param>
            <param name="maxDims">
An array of the maximum size of each dimension.
</param>
            <remarks>
                <p>
H5Screate_simple creates a new simple dataspace and opens it 
 for access.
</p>
                <p>
rank is the number of dimensions used in the dataspace.
</p>
                <p>
dims is an array specifying the size of each dimension of the 
dataset while maxdims is an array specifying the upper limit
on the size of each dimension. maxdims may be the null
pointer, in which case the upper limit is the same as dims.
</p>
                <p>
If an element of maxdims is H5S_UNLIMITED, (-1), the maximum
size of the corresponding dimension is unlimited. Otherwise,
no element of maxdims should be smaller than the corresponding
element of dims.
</p>
                <p>
The dataspace identifier returned from this function must be
released with H5Sclose or resource leaks will occur. 
</p>
            </remarks>
        </member>
        <member name="T:HDF5DotNet.H5S">
            <summary>
The H5S contains static member function for each of the supported
H5S calls of the HDF5 library.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5T.getStdType(HDF5DotNet.H5T.H5Type)">
            <summary>
 Get the hid_t from the enumerated standard data type.
</summary>
        </member>
        <member name="M:HDF5DotNet.H5T.getMemberClass(HDF5DotNet.H5DataTypeId,System.UInt32)">
            <summary>
Returns datatype class of compound datatype member.
</summary>
            <param name="typeId"> 
IN: Datatype identifier of compound object.
</param>
            <param name="memberNumber"> 
IN: Compound object member number.
</param>
            <returns>
Returns the datatype class if successful.
</returns>
            <exception cref="T:HDF5DotNet.H5TgetMemberClassException">
throws H5TgetMemberClassException on failure.
</exception>
            <remarks>
                <p>
Given a compound datatype, typeId, the function 
H5T.getMemberClass returns the datatype class of the compound
datatype member specified by memberNumber.
</p>
            </remarks>
        </member>
        <member name="M:HDF5DotNet.H5T.getNMembers(HDF5DotNet.H5DataTypeId)">
            <summary>
Retrieves the number of elements in a compound or enumeration 
datatype. 
</summary>
            <param name="typeId"> 
Identifier of datatype to query.
</param>
            <returns>
Returns the number of elements if successful.
</returns>
            <exception cref="T:HDF5DotNet.H5TgetNMembersException">
throws H5TgetNMembersException on failure.
</exception>
            <remarks>
H5Tget_nmembers retrieves the number of fields in a compound
datatype or the number of members of an enumeration datatype.
</remarks>
        </member>
        <member name="M:HDF5DotNet.H5T.getMemberType(HDF5DotNet.H5DataTypeId,System.UInt32)">
            <summary>
Returns the datatype of the specified member.
</summary>
            <param name="typeId"> 
Identifier of datatype to query.
</param>
            <param name="fieldIndex"> 
Field index (0-based) of the field type to retrieve.
</param>
            <returns>
Returns the identifier of a copy of the datatype of the field
if successful.
</returns>
            <exception cref="T:HDF5DotNet.H5TgetMemberTypeException">
throws H5TgetMemberTypeException on failure.
</exception>
            <remarks>
H5Tget_member_type returns the datatype of the specified
member. The caller should invoke H5Tclose() to release
resources associated with the type.
</remarks>
        </member>
        <member name="M:HDF5DotNet.H5T.getMemberIndex(HDF5DotNet.H5DataTypeId,System.String)">
            <summary>
Retrieves the index of a compound or enumeration datatype
member.
</summary>
            <param name="typeId"> 
Identifier of datatype to query.
</param>
            <returns>
Returns a valid field or member index if successful.
</returns>
            <exception cref="T:HDF5DotNet.H5TgetMemberIndexException">
throws H5TgetMemberIndexException on failure.
</exception>
            <remarks>
                <p>
H5Tget_member_index retrieves the index of a field of a 
compound datatype or an element of an enumeration datatype.
</p>
                <p>
The name of the target field or element is specified in fieldname.
</p>
                <p>
Fields are stored in no particular order with index values 
of 0 through N-1, where N is the value returned by 
H5T.getNMembers.  
</p>
            </remarks>
        </member>
        <member name="M:HDF5DotNet.H5T.getClass(HDF5DotNet.H5DataTypeId)">
            <summary>
Returns the datatype class identifier.
</summary>
            <param name="typeId"> Identifier of datatype to query.
</param>
            <remarks>
                <p>
H5Tget_class returns the datatype class identifier.
</p>
                <p>
Valid class identifiers, as defined in H5Tpublic.h, are:  
</p>
                <ul>
                    <li> H5T_INTEGER </li>
                    <li> H5T_FLOAT </li>
                    <li> H5T_TIME </li>
                    <li> H5T_STRING </li>
                    <li> H5T_BITFIELD </li>
                    <li> H5T_OPAQUE </li>
                    <li> H5T_COMPOUND </li>
                    <li> H5T_REFERENCE </li>
                    <li> H5T_ENUM </li>
                    <li> H5T_VLEN </li>
                    <li> H5T_ARRAY  </li>
                </ul>
            </remarks>
            <exception cref="T:HDF5DotNet.H5TgetClassException">
throws H5TgetClassException on failure.
</exception>
        </member>
        <member name="M:HDF5DotNet.H5T.vlenCreate(HDF5DotNet.H5DataTypeId)">
            <summary>
Creates a new variable-length datatype.
</summary>
            <param name="baseId"> Base type of datatype to create.
</param>
            <exception cref="T:HDF5DotNet.H5TvlenCreateException">
throws H5TvlenCreateException on failure.
</exception>
            <remarks>
                <p>
H5Tvlen_create creates a new variable-length (VL) datatype.
</p>
                <p>
   The base datatype will be the datatype that the sequence 
is composed of, characters for character strings, vertex 
coordinates for polygon lists, etc. The base type specified 
for the VL datatype can be of any HDF5 datatype, including 
another VL datatype, a compound datatype or an atomic datatype.
</p>
                <p>
When necessary, use H5Tget_super to determine the base type of
the VL datatype.
</p>
                <p>
The datatype identifier returned from this function 
should be released with H5Tclose or resource leaks will result. 
</p>
            </remarks>
        </member>
        <member name="M:HDF5DotNet.H5T.getNativeType(HDF5DotNet.H5DataTypeId,HDF5DotNet.H5T.Direction)">
            <summary>
Returns the native datatype of a specified datatype.
</summary>
            <param name="typeId"> 
Datatype identifier for the dataset datatype.
</param>
            <param name="direction">
Direction of search.
</param>
            <exception cref="T:HDF5DotNet.H5TgetNativeTypeException">
throws H5TgetNativeTypeException on failure.
</exception>
            <remarks>
                <p>
H5Tget_native_type returns the equivalent native datatype for
the datatype specified in type_id.
</p>
                <p> H5Tget_native_type is a high-level function designed 
primarily to facilitate use of the H5Dread function, for which 
users otherwise must undertake a multi-step process to determine 
the native datatype of a dataset prior to reading it into memory. 
It can be used not only to determine the native datatype for 
atomic datatypes, but also to determine the native datatypes 
of the individual components of a compound datatype, an 
enumerated datatype, an array datatype, or a variable-length 
datatype. </p>
                <p>
H5Tget_native_type selects the matching native datatype from
the following list:
</p>
                <ul>
                    <li>   H5T_NATIVE_CHAR   </li>
                    <li>   H5T_NATIVE_SHORT        </li>
                    <li>   H5T_NATIVE_INT          </li>
                    <li>   H5T_NATIVE_LONG         </li>
                    <li>   H5T_NATIVE_LLONG        </li>
                    <li>   H5T_NATIVE_UCHAR </li>
                    <li>   H5T_NATIVE_USHORT </li>
                    <li>   H5T_NATIVE_UINT </li>
                    <li>   H5T_NATIVE_ULONG </li>
                    <li>   H5T_NATIVE_ULLONG </li>
                    <li>   H5T_NATIVE_FLOAT </li>
                    <li>   H5T_NATIVE_DOUBLE </li>
                    <li>   H5T_NATIVE_LDOUBLE </li>
                </ul>
                <p>
The direction parameter indicates the order in which the
library searches for a native datatype match. Valid values for 
direction are as follows:
</p>
                <ul>
                    <li>
H5T_DIR_ASCEND searches the above list in ascending size of
the datatype, i.e., from top to bottom. (Default) 
</li>
                    <li>
H5T_DIR_DESCEND searches the above list in descending size of 
the datatype, i.e., from bottom to top.
</li>
                </ul>
                <p>
H5Tget_native_type is designed primarily for use with intenger
and floating point datatypes. Time, bifield, opaque, and 
reference datatypes are returned as a copy of type_id.
</p>
                <p>
The identifier returned by H5Tget_native_type should
eventually be closed by calling H5Tclose to release resources. 
</p>
            </remarks>
        </member>
        <member name="M:HDF5DotNet.H5T.insert(HDF5DotNet.H5DataTypeId,System.String,System.UInt32,HDF5DotNet.H5T.H5Type)">
            <summary>
H5Tinsert adds another member to the compound datatype
type_id. The new member has a name which must be unique within
the compound datatype. The offset argument defines the start
of the member in an instance of the compound datatype, and
field_id is the datatype identifier of the new member.
</summary>
            <param name="compoundDataType"> Identifier of compound data
type to modify.
</param>
            <param name="fieldName">
Name of the field to insert.
</param>
            <param name="offset">
Offset in memory structure of the field to insert.
</param>
            <param name="fieldId">
Datatype identifier of the field to insert.
</param>
            <exception cref="T:HDF5DotNet.H5TinsertException">
throws H5TinsertException on failure.
</exception>
            <remarks>
Members of a compound datatype do not have to be atomic
datatypes; a compound datatype can have a member which is a
compound datatype.
</remarks>
        </member>
        <member name="M:HDF5DotNet.H5T.insert(HDF5DotNet.H5DataTypeId,System.String,System.UInt32,HDF5DotNet.H5DataTypeId)">
            <summary>
H5Tinsert adds another member to the compound datatype
type_id. The new member has a name which must be unique within
the compound datatype. The offset argument defines the start
of the member in an instance of the compound datatype, and
field_id is the datatype identifier of the new member.
</summary>
            <param name="compoundDataType"> Identifier of compound data
type to modify.
</param>
            <param name="fieldName">
Name of the field to insert.
</param>
            <param name="offset">
Offset in memory structure of the field to insert.
</param>
            <param name="fieldId">
Datatype identifier of the field to insert.
</param>
            <exception cref="T:HDF5DotNet.H5TinsertException">
throws H5TinsertException on failure.
</exception>
            <remarks>
Members of a compound datatype do not have to be atomic
datatypes; a compound datatype can have a member which is a
compound datatype.
</remarks>
        </member>
        <member name="M:HDF5DotNet.H5T.enumCreate(HDF5DotNet.H5T.H5Type)">
            <summary>
H5T.enumCreate creates a new enumeration datatype based on the
specified base datatype parent_id, which must be an integer type. 
</summary>
            <param name="h5Type"> IN: Datatype identifier for the 
base type.
</param>
            <returns>
Returns the datatype identifier for the new enumeration
datatype if successful.
</returns>
            <exception cref="T:HDF5DotNet.H5TenumCreateException">
throws H5TenumCreateException on failure.
</exception>
        </member>
        <member name="M:HDF5DotNet.H5T.enumCreate(HDF5DotNet.H5DataTypeId)">
            <summary>
H5T.enumCreate creates a new enumeration datatype based on the
specified base datatype parent_id, which must be an integer type. 
</summary>
            <param name="parentId"> IN: Datatype identifier for the 
base type. This must be an integer type.
</param>
            <returns>
Returns the datatype identifier for the new enumeration
datatype if successful.
</returns>
            <exception cref="T:HDF5DotNet.H5TenumCreateException">
throws H5TenumCreateException on failure.
</exception>
        </member>
        <member name="M:HDF5DotNet.H5T.getSign(HDF5DotNet.H5DataTypeId)">
            <summary />
            <param name="typeId"> 
 	IN: Identifier of datatype to query.
</param>
            <exception cref="T:HDF5DotNet.H5TgetSizeException"> 
throws H5TgetSignException on failure.
</exception>
            <returns> 
Returns an H5T.Sign that indicates the sign.  Possible results
include H5T.Sign.UNSIGNED and H5T.Sign.TWOS_COMPLEMENT
</returns>
        </member>
        <member name="M:HDF5DotNet.H5T.getSize(HDF5DotNet.H5DataTypeId)">
            <summary> 
getSize returns the size of a datatype in bytes.
</summary>
            <param name="typeId"> 
 	IN: Identifier of datatype to query.
</param>
            <exception cref="T:HDF5DotNet.H5TgetSizeException"> 
throws H5TgetSizeException on failure.
</exception>
            <returns> 
Returns the size of the datatype in bytes if successful.
</returns>
        </member>
        <member name="M:HDF5DotNet.H5T.create(HDF5DotNet.H5T.CreateClass,System.UInt32)">
            <summary> 
H5T.create creates a new data type of the specified class with
the specified number of bytes.
</summary>
            <param name="createClass">
 Available create classes include COMPOUND, OPAQUE, and ENUM.
</param>
            <param name="size">
Number of bytes in the created data type.
</param>
            <exception cref="T:HDF5DotNet.H5TopenException"> throws H5TopenException 
when open fails
</exception>
            <remarks>
Use H5Tcopy to create integer or floating point data types.
</remarks>
            <returns> a vaild H5DataTypeId for the created data type 
</returns>
        </member>
        <member name="M:HDF5DotNet.H5T.open(HDF5DotNet.H5LocId,System.String)">
            <summary> 
H5T.open opens a named datatype at the location specified by
groupOrFileId and returns an identifier for the datatype. 
groupOrFileId is
either a file or group identifier. The identifier should
eventually be closed by calling H5Tclose to release resources.
</summary>
            <param name="groupOrFileId" />
 	IN: A file or group identifier.
<param name="datatypeName"> 
 	IN: A datatype name, defined within the file or group
identified by groupOrFileId.
</param><exception cref="T:HDF5DotNet.H5TopenException"> throws H5TopenException 
when open fails
</exception><returns> a vaild H5DataTypeId for the opened data type 
</returns></member>
        <member name="F:HDF5DotNet.H5T.H5TClass.ARRAY">
            <summary> Array class </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5TClass.VLEN">
            <summary> Vlen class </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5TClass.ENUM">
            <summary> Enum class </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5TClass.REFERENCE">
            <summary> Reference class </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5TClass.COMPOUND">
            <summary> Compound class </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5TClass.OPAQUE">
            <summary> Opaque class </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5TClass.BITFIELD">
            <summary> Bitfield class </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5TClass.STRING">
            <summary> String class (fixed or variable length) </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5TClass.TIME">
            <summary> Time class </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5TClass.FLOAT">
            <summary> Float class </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5TClass.INTEGER">
            <summary> Integer class </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.CreateClass.ENUM">
            <summary> Enum Data Type </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.CreateClass.OPAQUE">
            <summary> Opaque Data Type </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.CreateClass.COMPOUND">
            <summary> Compound Data Type </summary>
        </member>
        <member name="T:HDF5DotNet.H5T.CreateClass">
            <summary> Allowable data types for H5TCreate </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.C_S1">
            <summary> IEEE 64-bit Floating (big endian) </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.IEEE_F64BE">
            <summary> IEEE 64-bit Floating (big endian) </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.IEEE_F64LE">
            <summary> IEEE 64-bit Floating (little endian) </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.IEEE_F32BE">
            <summary> IEEE 32-bit Floating (big endian) </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.IEEE_F32LE">
            <summary> IEEE 32-bit Floating (little endian) </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_HBOOL">
            <summary> Native hbool</summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_HERR">
            <summary> Native herr</summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_HSSIZE">
            <summary> Native hssize</summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_HSIZE">
            <summary> Native hsize </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_HADDR">
            <summary> Native haddr</summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_OPAQUE">
            <summary> Native opaque </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_B64">
            <summary> Native 64-bit bitfield </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_B32">
            <summary> Native 32-bit bitfield </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_B16">
            <summary> Native 16-bit bitfield </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_B8">
            <summary> Native 8-bit bitfield </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_LDOUBLE">
            <summary> Native long double </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_DOUBLE">
            <summary> Native double </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_FLOAT">
            <summary> Native float </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_ULLONG">
            <summary> Native unsigned long long </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_LLONG">
            <summary> Native signed long long </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_ULONG">
            <summary> Native unsigned long </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_LONG">
            <summary> Native signed long </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_UINT">
            <summary> Native unsigned int </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_INT">
            <summary> Native signed int </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_USHORT">
            <summary> Native unsigned short </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_SHORT">
            <summary> Native signed short </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_UCHAR">
            <summary> Native unsigned character </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.NATIVE_SCHAR">
            <summary> Native signed character </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_REF_DSETREG">
            <summary> 8-bit signed integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_REF_OBJ">
            <summary> 8-bit signed integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_B64LE">
            <summary> 8-bit signed integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_B64BE">
            <summary> 8-bit signed integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_B32LE">
            <summary> 8-bit signed integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_B32BE">
            <summary> 8-bit signed integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_B16LE">
            <summary> 8-bit signed integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_B16BE">
            <summary> 8-bit signed integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_B8LE">
            <summary> 8-bit signed integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_B8BE">
            <summary> 8-bit signed integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_U64LE">
            <summary> 64-bit unsigned integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_U64BE">
            <summary> 64-bit unsigned integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_U32LE">
            <summary> 32-bit unsigned integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_U32BE">
            <summary> 32-bit unsigned integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_U16LE">
            <summary> 16-bit unsigned integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_U16BE">
            <summary> 16-bit unsigned integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_U8LE">
            <summary> 8-bit unsigned integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_U8BE">
            <summary> 8-bit unsigned integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_I64LE">
            <summary> 64-bit signed integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_I64BE">
            <summary> 64-bit signed integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_I32LE">
            <summary> 32-bit signed integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_I32BE">
            <summary> 32-bit signed integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_I16LE">
            <summary> 16-bit signed integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_I16BE">
            <summary> 16-bit signed integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_I8LE">
            <summary> 8-bit signed integer (little endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.H5Type.STD_I8BE">
            <summary> 8-bit signed integer (big endian)    </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.Direction.DESCEND">
            <summary> Descending order </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.Direction.ASCEND">
            <summary> Ascending order </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.Direction.DEFAULT">
            <summary> The default direction is ascending. </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.Sign.TWOS_COMPLEMENT">
            <summary> Two's complement  number </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.Sign.UNSIGNED">
            <summary> Unsigned number </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.Order.BE">
            <summary> Big endian </summary>
        </member>
        <member name="F:HDF5DotNet.H5T.Order.LE">
            <summary> Little endian </summary>
        </member>
        <member name="T:HDF5DotNet.H5DataTypeId">
            <summary>
The H5D contains static member function for each of the supported
H5D calls of the HDF5 library.
</summary>
            <summary> H5DataTypeId uniquely identifies a data type. </summary>
        </member>
        <member name="M:HDF5DotNet.HDFException.#ctor(System.String,System.UInt32,System.Exception)">
            <param name="message"> a text description of the problem</param>
            <param name="previouslyThrownException"> When an exception is 
thrown while handling a previous exception. previouslyThrownException 
provides a handle to the previous exception. </param>
        </member>
        <member name="M:HDF5DotNet.HDFException.#ctor(System.String,System.UInt32)">
            <summary>
HDF Exception that includes a text description. 
</summary>
            <param name="message"> a text description of the problem </param>
        </member>
    </members>
</doc>