Prerelease Notes

General Comments

   This pre-distribution provides some basic HDF5 wrappers for .NET.  These
wrappers will allow you to create/open/close HDF5 files/groups/data
sets/data types, although not all these library wrappers have been fully
implemented.  The HDF5DotNet library is a work in progress, and this
pre-release is intended to demonstrate or implementation approach, show
status, and solicit comments.  At present, it is only possible to write 
32-bit integer data to a file, although this limitation will be overcome 
quite soon.  The example code in HDF5DotNet\Examples\CSharpExample1\Program.cs 
demonstrates most all of the currently available capability.  This 
pre-distribution has been tested using Visual Studio 2005 and Windows XP with 
Service Pack 2 only.

   While the wrapper API mirrors that of the underlying "C" library there
are some obvious differences.  First, the wrappers are implemented as
static members of classes named for each of the "C" API interfaces.  Thus
the "C" function H5Fcreate() is wrapped as H5F.create().  A second
difference is the addition of data types to provide a type-safe interface.
In most instances the hid_t type has been replaced with a data type that is
specific to the id function.  These data types include such types as
H5FileId, H5GroupId, and H5DataSetId.  The use of these types provide
compile-time checks to ensure appropriate id usage.  Finally, rather than
return status codes, the wrappers throw exceptions when requested
operations fail.

   In general, function overloading has been used to replace functions that
can take null id's.  For example, rather than allow the last parameter of 
H5F.create to be null, the overload functions:
H5F.create(string filename, CreateMode mode)
H5F.create(string filename, CreateMode mode, H5PropertyListId id)
are provided instead.

   It is always difficult to pick variable, datatype, and class names that 
make sense and satisfy diverse concepts of aesthetics.  We've done our best
to pick good names, but we are happy to consider other ideas at this point
when such changes can be made with relatively little effort.  

This prerelease contains the following files (indentation
reflects directory structure):

   .\HDF5DotNet directory

      \Examples - Example files in 3 languages

         \CSharpExample1 - C# example
            Program.cs - source code for C# example
            CSharpExample1.sln - Visual Studio solution file

         \cppExample - C++\CLI example
            example1.cpp - source code for C++ example
            cppExample.sln - Visual Studio solution file

         \VBExample1 - Visual Basic .NET example
            VBExample1.vb - source code for VB example               
            VBExample1.sln - Visual Studio solution file
                                
      \HDF5DotNet - files to build HDF5DotNet.dll
         makeEx.cpp - source file for makeEx.exe, exception class generator.
         makeEx.exe - exception class generator.  This program writes the 
                      source code for HDFExceptionSubclasses.h and 
                      HDFExceptionSubclasses.cpp. It is strictly a
                      developer tool.
         exceptionNames - input file for makeEx.exe

         makeDoc.bat - script that uses Sandcastle (alpha) documentation
                       tool to produce help files.  This script will not be
                       needed soon as the graphical user interface for 
                       sandcastle becomes available. At present it assumes 
                       that Sandcastle is installed in its
                       default location ("C:\Program Files\Sandcastle").
                       Sandcastle is available 
                       from http://blogs.msdn.com/sandcastle/
                       Installation of Sandcastle is only necessary if you
                       are making modifications to the HDF5DotNet help
                       files.

         H5*.h and H5*.cpp - source files for HDF5 wrapper classes.
                             These classes contain static functions that
                             wrap HDF5 native functions.

         \doc\output
            HDF5DotNet.chm - help files.  Double click this file to see the 
            VisualStudio-style library documentation.

         \doc\output\html
            HTML versions of the help files.  These seem to be missing a
            link from the class to the member functions, but the html files
            for the members are available in this directory.  

         PrereleaseNotes.txt - this file.

      \include - HDF5 include files with some minor modifications.

To build a HDF5DotNet C# Project:

   1.)  Make sure that the files hdf5dll.dll, hdf5dll.lib, and szlibdll.dll 
are installed in \Windows\System32 or in the project's working directory.  
You can obtain szlibdll.dll from: 
  ftp://ftp.ncsa.uiuc.edu/HDF/lib-external/szip/2.0/bin/windows/

          HDF5 uses Szip version 2.0 for compression and Szip
          compression software is provided with HDF5 products starting
          from 1.6.0 release.  To use Szip 2.0 library, you can
          download Szip source codes and binaries from
          ftp://hdf.ncsa.uiuc.edu/lib-external/szip/bin/windows

          Please note that Szip is not a totally open-source free
          software.  For licensing issue of Szip, please check 
          "Licensing terms" at
          http://hdf.ncsa.uiuc.edu/doc_resource/SZIP/index.html.

   You can obtain hd5fdll.dll and hd5fdll.lib from:
   
   2.)  Start Microsoft Visual Studio 2005.  Create a C# project.

   3.)  Select Project | Add Reference from Visual Studio's Menu.
        Select the Browse Tab.
        Browse to HDF5DotNet\HDF5DotNet\Debug and select 
        HDF5DotNet.dll (press OK).

   4.)  Add the statement "using HDF5DotNet;" to the C# source file.
   
   5.)  You should be able to write your program now utilizing the HDF5
        "IntelliSense".  Type "H5F." and you should see the available 
        completions.
        
   6.)  Documentation for the implemented functions is available through
        the help files at HDF5DotNet\HDF5DotNet\doc\output\HDF5DotNet.chm.
        Double-click this file to browse the help files.  Because these
        functions are wrappers, their functions are similar to those
        described for the HDF5 "C" library.

   7.)  The following list provides the prototypes for the currently
        implemented wrappers.  For complete descriptions, please see the 
	help file (HDF5DotNet.chm).  The "Examples" directory provides
        sample projects in C#, C++/CLI, and Visual Basic.


        H5F Interface Functions:
	------------------------

	// Create a new HDF5 File
	public static H5FileId H5F.create(string filename, CreateMode fileMode);

	// Open an HDF5 File
	public static H5FileId H5F.open(string filename, OpenMode fileMode);	
	public static H5FileId H5F.open(string filename, OpenMode fileMode, 
	                H5PropertyListId propertyListId);

	// Close an HDF5 File 
	public static void H5F.close(H5FileId);


        H5G Interface Functions:
	------------------------

	// Create a new HDF5 Group
	public static H5GroupId H5G.create(H5FileId fileId, string groupName,
	                                   uint sizeHint);

        // Open a HDF5 Group
	public static H5GroupId H5G.open(H5LocId groupOrFileId, 
	                                 string groupName);

        // Close an HDF5 Group
	public static void H5G.close(H5GroupId H5GroupId);


        H5D Interface Functions:
	------------------------

	// Create a data set
	public static H5DataSetId H5D.create(H5LocId groupOfFileId,
	                                     string dataSetName,
					     H5DataTypeId typeId,
					     H5DataSpaceId spaceId);

	// Create a data set
	public static H5DataSetId H5D.create(H5LocId groupOfFileId,
	                                     string dataSetName,
					     H5T.H5Type type,
					     H5DataSpaceId spaceId);

        // Open a data set
	public static H5DataSetId H5D.open(H5LocId groupOrFileId,
	                                   string dataSetName);

        // Read integer data
	public static void H5D.read(H5DataSetId dataSetId,
	                            H5T.H5Type dataType,
                                    int[] data);

        // Write integer data
	public static void H5D.write(H5DataSetId dataSetId,
                                     H5T.H5Type dataType,
				     int[] data);
                                     

        H5S Interface Functions:
	------------------------

	// Create a new simple dataspace
	public static H5DataSpaceId H5S.create_simple(int rank, ulong[] dims);

	// Create a new simple dataspace
	public static H5DataSpaceId H5S.create_simple(int rank, ulong[] dims, 
				                      ulong[] maxDims);

	// Close a dataspace
	public static void H5S.close(H5DataSpaceId);
	

        H5T Interface Functions:
	------------------------

	// Copy a data type.
	public static H5DataTypeId H5T.copy(H5DataSetId dataSetId);
	public static H5DataTypeId H5T.copy(H5DataTypeId dataTypeId);
	public static H5DataTypeId H5T.copy(H5Type standardType);

	// Get a data type size
	public static uint H5T.getSize(H5DataTypeId typeId);

	// Set a data type byte order 
	public static void H5T.setOrder(H5DataTypeId typeId, H5T.Order order);

	// Set a data type size
	public static void H5T.setSize(H5DataTypeId typeId, uint size);
	

   8.) While you can use the HDF5DotNet.dll as downloaded to write new HDF5
projects, if you want to change the library itself you will need to
recompile it.  A Visual Studio solution file has been provided in
HDF5DotNet\HDF5DotNet\HD5FDotNet.sln.  The solution file uses relative
paths for source files, but an absolute path for the hdf5 lib file. If
hdf5dll.lib is placed in the \windows\system32 directory, the project
should compile without modification.  If you want to place hdf5dll.lib
somewhere else, chose Project | Properties from the Visual Studio menu, and
then under Configuration Properties/Linker/Input change the location of
hdf5dll.lib in the "Additinal Dependencies" field to the desired location.

   9.)  Solution files also exist in the Example subdirectories for a C#
example (Examples\CSharpExample1\CSharpExample1.sln), and C++\CLI example
(Examples\cppExample1\cppExample1.sln), and a Visual Basic example
(Examples\VBexample1\VBExample1.sln).  These can be compiled and run
without need for modification from Visual Studio.

   10.)  Please send any questions or comments to help at hdfgroup dot
        org.
	
